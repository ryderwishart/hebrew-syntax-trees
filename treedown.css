/**************** 
* LAYOUT RULES  *
*****************/

book * {
  direction: rtl;
}

book {
  padding: 2em;
}
milestone {
  color: blue;
  display: block;
  margin-block: 1rem 0;
}
milestone + milestone {
  display: inline;
}
sentence {
  display: flex;
  direction: rtl;
  flex-direction: column;
  gap: 1rem; /* Ryder: 1rem space between <p> and <wg> */
}

[class='C'] {
  border: 1px solid black;
  border-inline-end: none;
  padding: 0.5rem;
}

/*************************************** 
* ELEMENTS THAT SHOULD BE ON NEW LINES *
***************************************/

[class='C'],
[function],
[type='group'],
[rela],
[type='conjuncted-wg'] {
  display: block;
}

/*******************************************
* ELEMENTS THAT SHOULD BE ON THE SAME LINE *
*******************************************/

/***********************************
* ELEMENTS THAT SHOULD BE INDENTED *
***********************************/

[class='C'],
[function],
[type='group'],
[type='conjuncted-wg'] {
  margin-inline-start: 1rem;
}

/***************************************
* ELEMENTS THAT SHOULD NOT BE INDENTED *
***************************************/

[type='conjuncted-wg']:first-of-type,
[function] > [class='C'][function='apposition'],
[function] > [class='C'] {
  margin-inline-start: 0;
}

/****************
/* function MARKERS *
****************/

[function] {
  margin-inline-start: 1rem;
}

[function]::before {
  content: attr(function) !important;
  color: cadetblue;
  margin-inline-start: -1rem;
  margin-inline-end: 0.4rem; /* Ryder: 0.4rem space between function and element seems to generally align with a 1rem space without a function. */
}
[rela]::before {
  color: cornflowerblue;
  background: black;
  content: attr(rela) !important;
  margin-inline-start: -1rem;
  margin-inline-end: 0.4rem;
}

[function='aux']::before {
  content: '~';
}
[function='adv']::before {
  content: '+';
}
[function='apposition']::before {
  content: ':';
}
[function='ellipsis']::before {
  content: '+';
  /* content: 'â€¦'; */
}
[function='topic']::before {
  content: '+';
  /* content: '>'; */
}
[function='tail']::before {
  content: '+';
  /* content: '<'; */
}

/**************
* WORD LAYOUT *
**************/

/* Ryder: These next three rules are essential to override 
default DOM behaviour that adds whitespace characters
between inline elements. */
wg[function] {
  font-size: 0;
}
wg[function]::before,
wg[function] > * {
  font-size: 1rem;
}

w {
  margin-right: 0.2rem;
}

/****************
* SPECIAL CASES *
****************/

/* Ryder: clauses with clause functions should have the function above the group and to the right. */
[class='C'][function] {
  margin-block-start: 1.2rem;
}
[class='C'][function] > :first-child:not([class='C']) {
  margin-block-start: -0.7rem;
}
[class='C'][function]::before {
  margin-inline-start: -1.25rem;
  margin-block-start: -1.4rem;
  margin-bottom: 1rem;
  display: block;
}

/* Ryder: clauses with the apposition function require an additional indentation (2 rems) to ensure the function itself is at the right level. */
[function='apposition'][class='C'],
[function='apposition'][type^='wrapper-clause'],
[type='apposition-group'] > [class='C'][function='apposition'],
[function]:not([class='C']):not([type='apposition-group'])
  > [function='apposition'] {
  margin-inline-start: 2rem;
}

[function] > [function='apposition'] {
  margin-inline-start: 1rem !important;
}

[discontinuous='true']::after {
  content: '*' !important;
  color: cadetblue;
}

/************
* DEBUGGING *
************/

/* Ryder: this is a temporary affordance for debugging - it highlights errors for unprocessed nodes. */
[function^='err']::before {
  background: brown;
  color: white;
  font-size: 0.6rem;
  font-family: monospace;
  padding: 0.05rem 0.3rem;
  border-radius: 0.2rem;
}

[projected],
[level='secondary'] {
  margin-inline-start: 1rem;
  /* background: red; */
}
[level='secondary2'] {
  margin-inline-start: 2rem;
  /* background: blue; */
}

[class='C'] > p > milestone {
  display: block;
}
[class='C'] p > milestone {
  display: none;
}

*:not([class='C']) > *[function]:not([function='apposition'])::before {
  display: none;
}

sentence > [class='C'] {
  margin-block-start: 1rem;
}

wg:not([class='C']):not([function]):not(:first-child):has(
    [function='connector']
  ) {
  display: block;
  /* margin-inline-start: 1rem; */
}

[function='qualifier']:not([class='C']) {
  display: inline !important;
  margin-inline-start: 0rem !important;
}

wg:not([x]) wg[class='C'][function='apposition'],
wg:not([x]) wg[class='C'][function='apposition'] ~ * {
  margin-inline-start: 2rem;
  display: block;
}

p {
  /* display: none; */
}
